generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_PRISMA_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String              @id @default(cuid())
    name            String?
    email           String?             @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    posts           Post[]
    userGameCards   UserGameCard[]
    userCustomDecks UserCustomDeck[]
    purchases       Purchase[]
    gameSessions    GameSessionPlayer[]

    willPlayStream       Boolean @default(false)
    willReviewLiterature Boolean @default(false)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model SearchableImage {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    description   String @unique
    imageFileName String @unique

    tags          Tag[]
    title         String         @unique
    gameCard      GameCard?
    userGameCards UserGameCard[]
}

model GameCard {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title       String
    description String
    isGeneric   Boolean
    rarity      CardRarityEnum

    isBattler  Boolean @default(false)
    powerLevel Int?

    image            SearchableImage    @relation(fields: [imageId], references: [id])
    imageId          Int                @unique
    userGameCards    UserGameCard[]
    pokerCardMapping PokerCardMapping[]
    purchase         Purchase           @relation(fields: [purchaseId], references: [id])
    purchaseId       Int

    @@unique([title, imageId])
}

model UserGameCard {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    isFoil     Boolean
    gameCard   GameCard @relation(fields: [gameCardId], references: [id])
    gameCardId Int

    user            User             @relation(fields: [userId], references: [id])
    userId          String
    cardBackImage   SearchableImage  @relation(fields: [cardBackImageId], references: [id])
    cardBackImageId Int
    customDecks     UserCustomDeck[]
}

model UserCustomDeck {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user              User                @relation(fields: [userId], references: [id])
    userId            String
    name              String
    description       String
    gameCards         UserGameCard[]
    GameSessionPlayer GameSessionPlayer[]
}

model Tag {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name             String            @unique
    isPrintedTag     Boolean
    characters       Character[]
    searchableImages SearchableImage[]
    regionSnapshots  RegionSnapshot[]
}

model StandardDeck {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name              String             @unique
    description       String
    pokerCardMappings PokerCardMapping[]
}

model PokerCardMapping {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    pokerCard      PokerCard     @relation(fields: [pokerCardName], references: [name])
    pokerCardName  String
    gameCard       GameCard      @relation(fields: [gameCardId], references: [id])
    gameCardId     Int
    StandardDeck   StandardDeck? @relation(fields: [standardDeckId], references: [id])
    standardDeckId Int?
}

model PokerCard {
    name     String             @unique
    suit     String
    mappings PokerCardMapping[]
}

enum CardRarityEnum {
    COMMON
    UNCOMMON
    RARE
    ULTRA_RARE
    UNIQUE
}

model Purchase {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    user            User       @relation(fields: [userId], references: [id])
    userId          String
    gameCards       GameCard[]
    isFoil          Boolean
    isDemo          Boolean    @default(false)
    stripePaymentId String?

    @@index([userId])
}

model GameSession {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    gameState Json

    players GameSessionPlayer[] // Relation to players
}

model GameSessionPlayer {
    id            Int            @id @default(autoincrement())
    gameSession   GameSession    @relation(fields: [gameSessionId], references: [id])
    gameSessionId String
    user          User?          @relation(fields: [userId], references: [id])
    userId        String?
    playerType    PlayerType     @default(COMPUTER) // HUMAN or COMPUTER
    deck          UserCustomDeck @relation(fields: [deckId], references: [id])
    deckId        Int

    @@index([gameSessionId])
}

enum PlayerType {
    HUMAN
    COMPUTER
}

enum RegionKind {
    UNIVERSE
    SUPERCLUSTER
    GALAXY
    WORLD
    SUPERREGION
    REGION
    SUBREGION
    // zones include towns, dungeons, encounter areas, building interiors, and so on
    ZONE
}

model RegionSnapshot {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name          String
    // days before or after the monstrous vision
    narrativeDays Int
    description   String
    mainImageTag  Tag    @relation(fields: [tagId], references: [id])
    tagId         Int    @unique

    commonRace   String
    commonTongue String
    // elevation is in meters
    maxElavation Int
    minElevation Int
    regionKind   RegionKind

    // score ratings are 1 to 100
    // diversityScore influences racial, religious, economic, political, and other diversity
    diversityScore      Int
    // Evergreen and Earth are both size 100
    physicalSizeScore   Int
    populationSizeScore Int

    subregions     RegionSnapshot[] @relation("RegionHierarchy")
    parentRegion   RegionSnapshot?  @relation("RegionHierarchy", fields: [parentRegionId], references: [id])
    parentRegionId Int?

    @@unique([name, narrativeDays])
}

model Character {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name         String
    description  String
    mainImageTag Tag    @relation(fields: [tagId], references: [id])
    tagId        Int    @unique
    rarity       String
    race         String

    appearance            CharacterAppearance @relation(fields: [appearanceId], references: [id])
    appearanceId          Int                 @unique
    combatStatistics      CombatStatistics    @relation(fields: [combatStatisticsId], references: [id])
    combatStatisticsId    Int
    gender                String
    noncombatStatistics   NoncombatStatistics @relation(fields: [noncombatStatisticsId], references: [id])
    noncombatStatisticsId Int                 @unique
    socialAffinities      CharacterAffinities @relation(fields: [socialAffinitiesId], references: [id])
    socialAffinitiesId    Int

    awakeningRegion         String
    characterBackstory      String           @unique
    initialLevel            Int
    initialAge              Int
    initialClasses          BattleClass[]
    initialSpecialAbilities SpecialAbility[]
    initialMemories         String
    irlBackstory            String
}

model CharacterSnapshot {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name             String
    narrativeArc     String
    narrativeChapter Int
    narrativeDays    Int

    age              Int
    awakeningRegion  String
    classes          BattleClass[]
    currentState     CharacterState   @relation(fields: [currentStateId], references: [id])
    currentStateId   Int              @unique
    description      String
    itemsHeld        ItemHeld[]
    level            Int
    specialAbilities SpecialAbility[]

    @@unique([name, narrativeDays])
}

model CharacterAppearance {
    id                     Int        @id @default(autoincrement())
    eyeColor               String
    hairColor              String
    skinTone               String
    physicalSize           String
    physicalBuild          String
    notableCharacteristics String
    character              Character?
}

model CharacterAffinities {
    id              Int          @id @default(autoincrement())
    characters      Character[]
    cultures        String[]
    guildMembership String
    religions       String[]
    reputations     Reputation[]
}

model SpecialAbility {
    id                  Int                @id @default(autoincrement())
    name                String             @unique
    description         String
    character           Character?         @relation(fields: [characterId], references: [id])
    characterId         Int?
    characterSnapshot   CharacterSnapshot? @relation(fields: [characterSnapshotId], references: [id])
    characterSnapshotId Int?
}

model CombatStatistics {
    id           Int         @id @default(autoincrement())
    healthPoints Int
    attack       Int
    defense      Int
    speed        Int
    magicDefense Int
    character    Character[]
}

model NoncombatStatistics {
    id Int @id @default(autoincrement())

    agreeableness     Int
    character         Character?
    charisma          Int
    conscientiousness Int
    dexterity         Int
    extraversion      Int
    intelligence      Int
    neuroticism       Int
    openness          Int
    strength          Int
}

model CharacterState {
    id              Int                @id @default(autoincrement())
    healthStatus    String
    ailmentsEffects String
    hungerStatus    String
    fatigueStatus   String
    character       CharacterSnapshot?
}

model BattleClass {
    id                  Int                @id @default(autoincrement())
    name                String
    character           Character?         @relation(fields: [characterId], references: [id])
    characterId         Int?
    characterSnapshot   CharacterSnapshot? @relation(fields: [characterSnapshotId], references: [id])
    characterSnapshotId Int?
}

model ItemHeld {
    id          Int               @id @default(autoincrement())
    item        String
    characterId Int
    character   CharacterSnapshot @relation(fields: [characterId], references: [id])
}

model Reputation {
    id           Int                 @id @default(autoincrement())
    name         String
    reputation   String
    affinitiesId Int
    affinities   CharacterAffinities @relation(fields: [affinitiesId], references: [id])
}
