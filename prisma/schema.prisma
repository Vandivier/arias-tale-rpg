generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_PRISMA_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String           @id @default(cuid())
    name            String?
    email           String?          @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    posts           Post[]
    userGameCards   UserGameCard[]
    userCustomDecks UserCustomDeck[]

    willPlayStream       Boolean @default(false)
    willReviewLiterature Boolean @default(false)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model SearchableImage {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    description String
    imageUrl    String

    tags          Tag[]
    title         String
    gameCard      GameCard?
    userGameCards UserGameCard[]
}

model GameCard {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String
    description String
    isGeneric   Boolean
    rarity      CardRarityEnum
    tags        Tag[]

    battlerPower  Int?
    battlerHealth Int?

    image            SearchableImage    @relation(fields: [imageId], references: [id])
    imageId          Int                @unique
    userGameCards    UserGameCard[]
    pokerCardMapping PokerCardMapping[]
}

model UserGameCard {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    isFoil     Boolean
    gameCard   GameCard @relation(fields: [gameCardId], references: [id])
    gameCardId Int

    user            User             @relation(fields: [userId], references: [id])
    userId          String
    userCardTags    Tag[]
    cardBackImage   SearchableImage  @relation(fields: [cardBackImageId], references: [id])
    cardBackImageId Int
    customDecks     UserCustomDeck[]
}

model UserCustomDeck {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user        User           @relation(fields: [userId], references: [id])
    userId      String
    name        String
    description String
    gameCards   UserGameCard[]
}

// TODO: seed notable non_battler tags including techniques, items, environments, and events
model Tag {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name             String
    isPrintedTag     Boolean
    searchableImages SearchableImage[]
    gameCards        GameCard[]
    userGameCards    UserGameCard[]
}

model StandardDeck {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name              String
    description       String
    pokerCardMappings PokerCardMapping[]
}

model PokerCardMapping {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    pokerCard      PokerCard     @relation(fields: [pokerCardName], references: [name])
    pokerCardName  String
    gameCard       GameCard      @relation(fields: [gameCardId], references: [id])
    gameCardId     Int
    StandardDeck   StandardDeck? @relation(fields: [standardDeckId], references: [id])
    standardDeckId Int?
}

model PokerCard {
    name     String             @unique
    suit     String
    mappings PokerCardMapping[]
}

enum CardRarityEnum {
    COMMON
    UNCOMMON
    RARE
    ULTRA_RARE
    UNIQUE
}
